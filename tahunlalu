gudang = [['sabun', 5000, 2], ['sikat gigi', 3000, 2], ['pasta gigi', 2500, 2], ['deterjen', 2000, 2], ['pewangi', 1000, 2]]

print('List barang toko barokah: ')
for barang in gudang:
    print(barang)

def penambah_barang(gudang):
    print('Barang yang ada di gudang saat ini adalah')
    for barang in gudang:
        print(barang)
    print('-'*50)
    jumlah = int(input('Masukkan total jenis barang: '))
    if jumlah < 2:
        print('Minimal menambahkan 2 jenis barang')
    else:
        for i in range(1, jumlah+1):
            print(f'Barang ke {i}')
            nama = input('masukkan nama barang: ')
            print(f'masukkan nama barang: {nama}')
            banyak = int(input(f'Masukkan total {nama}: '))
            print(f'masukkan total {nama}: {banyak}')
            for barang in gudang:
                if nama in barang:
                    item = barang
                    barang[2] = barang[2] + banyak
            print(f'Penambahan berhasil, total {nama} saat ini adalah: {item[2]}')
        print('Barang yang ada di gudang saat ini adalah')
        print('-'*50)
        for barang in gudang:
            print(barang)

penambah_barang(gudang)
===============================================================================================
# 2
# 1. Bertemu teller
queueSatu = []
# 2. Bertemu CS
queueDua = []
# 3. antre ATM
queueTiga = []

def sistem_antrian():
    pilihan = int(input('''Selamat datang di Antrean BankUlar
          Adakah yang bisa kami bantu?
          Menu: 
              1. bertemu Teller
              2. bertemu CS
              3. antre ATM
          Masukkan menu pilihan anda: '''))
    print(f'Masukkan menu pilihan anda: {pilihan}')
    nama = input('Masukkan nama anda: ')
    print(f'Masukkan nama anda: {nama}')
    if pilihan == 1:
        queueSatu.append(nama)
        print(f'Terima kasih, {nama} telah masuk ke antrean {queueSatu} dengan nomor antrean {len(queueSatu)}')
    elif pilihan == 2:
        queueDua.append(nama)
        print(f'Terima kasih, {nama} telah masuk ke antrean {queueDua} dengan nomor antrean {len(queueDua)}')
    elif pilihan == 3:
        queueTiga.append(nama)
        print(f'Terima kasih, {nama} telah masuk ke antrean {queueTiga} dengan nomor antrean {len(queueTiga)}')
sistem_antrian()
=========================================================================================================================
#3
def bubble_sort(list_angka):
    ganjil = [x for x in list_angka if x % 2 != 0]
    genap = [x for x in list_angka if x % 2 == 0]
    n_ganjil = len(ganjil)
    n_genap = len(genap)
    for i in range(n_ganjil):
        cursor = 0
        for i in range(n_ganjil-1):
            if ganjil[cursor] > ganjil[cursor+1]:
                ganjil[cursor], ganjil[cursor+1] = ganjil[cursor+1], ganjil[cursor]
            cursor+=1
    for i in range(n_genap):
        cursor = 0
        for i in range(n_genap-1):
            if genap[cursor] > genap[cursor+1]:
                genap[cursor], genap[cursor+1] = genap[cursor+1], genap[cursor]
            cursor+=1
    list_angka = ganjil + genap
    return list_angka

angka = [5, 4, 2, 3, 1, 9, 0, 7, 6, 3, 9]
print(bubble_sort(angka))
=============================================================================================================================
# 4
def create_graph():
    graph = {
        'Gresik': {'Surabaya': 9, 'Mojokerto': 11},
        'Surabaya': {'Gresik':9, 'Sidoarjo': 3},
        'Mojokerto': {'Gresik': 11, 'Sidoarjo': 13},
        'Sidoarjo': {'Surabaya': 3, 'Mojokerto': 13,'Pasuruan': 4},
        'Pasuruan': {'Sidoarjo': 4, 'Jember': 6, 'Malang': 7},
        'Jember': {'Pasuruan': 6, 'Malang': 15},
        'Malang': {'Pasuruan': 7, 'Jember': 15}
    }
    return graph

def dijkstra(graph, start, end):
    # Initialize distances with infinity and set the distance to the start node to 0
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    
    # Dictionary to keep track of the best path to each node
    previous_nodes = {node: None for node in graph}
    
    # List to keep track of nodes to visit (tuple of (distance, node))
    nodes_to_visit = [(0, start)]
    
    while nodes_to_visit:
        # Sort the list and pop the node with the smallest distance
        nodes_to_visit.sort()
        current_distance, current_node = nodes_to_visit.pop(0)
        
        # If we have reached the end node, reconstruct the path
        if current_node == end:
            path = []
            while previous_nodes[current_node] is not None:
                path.insert(0, current_node)
                current_node = previous_nodes[current_node]
            path.insert(0, start)
            return distances[end], path
        
        # Check neighbors
        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            
            # Only consider this new path if it's better
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                nodes_to_visit.append((distance, neighbor))
    
    return float('infinity'), []  # If the end node is unreachable, return infinity and an empty path

# Example usage
graph = create_graph()
start_node = 'Surabaya'
end_node = 'Malang'
shortest_distance, path = dijkstra(graph, start_node, end_node)

print(f"Shortest distance from node {start_node} to node {end_node}: {shortest_distance}")
print(f"Path: {' -> '.join(path)}")

========================================================================================================================
responsi
#1 angka prioritasi disortinng ke posisi paling depan
def antrian_prioritas(no_urut):
    prioritas = input('masukkan angka prioritas (1, 3, 5):').split(', ')
    prioritas = [int(x) for x in prioritas]
    antrean = no_urut
    for index, angka in enumerate(no_urut):
        if angka in prioritas:
            antrean.pop(index)
    antrean = prioritas + antrean
    return antrean

no_urut = [1, 2, 3, 4, 5, 6, 7]
antrian_prioritas(no_urut)
========================================================================================================================
#2 fungsi rekursif, bilangan prima di depan dan diproses terlebih dahulu
def is_prime(n):
    cek = True
    if n < 2:
        cek = False
    for i in range(2,n):
        if n % i == 0:
            cek = False
    return cek

def process_queue_recursive(queue, result=[]):
    if not queue:
        return result
    
    prime_found = False
    for i, num in enumerate(queue):
        if is_prime(num):
            result.append(num)
            queue.pop(i)
            prime_found = True

            break

    if not prime_found and queue:
        num = queue.pop(0)
        result.append(num)

    return process_queue_recursive(queue, result)

Bil_input = [1, 2, 3, 4, 5]
hasil_urutan = process_queue_recursive(Bil_input)
print("Hasil urutan =", hasil_urutan)
========================================================================================================================
#3 kalkulator bagi dan kali didahulukan
def operate(bil1, bil2, opr):
    if opr == '+':
        return bil1 + bil2
    elif opr == '-':
        return bil1 - bil2
    elif opr == '*':
        return bil1 * bil2
    elif opr == '/':
        return bil1 / bil2
def kalkulator():
    l_angka = input('Masukkan angka (1, 3, 4):').split(', ')
    angka = [int(x) for x in l_angka]
    opr1  = input('masukkan operasi 1=: ')
    opr2  = input('masukkan operasi 2=: ')

    operator = {'+': 1, '-': 1,'*': 2, '/':2}
    
    if operator[opr2] > operator[opr1]:
        bil1 = angka.pop(1)
        bil2 = angka.pop(1)
        angka.append(operate(bil1, bil2, opr2))
        hasil = operate(angka[0], angka[1], opr1)
    elif operator[opr2] < operator[opr1]:
        bil1 = angka.pop(0)
        bil2 = angka.pop(0)
        angka.append(operate(bil1, bil2, opr1))
        hasil = operate(angka[0], angka[1], opr2)
    print(f'Hasil dari {l_angka[0]} {opr1} {l_angka[1]} {opr2} {l_angka[2]} = {hasil}')
    return hasil

kalkulator()
========================================================================================================================
#4 buat rule dan tree menggunakan gini, sederhanakan rule dan tree
import pandas as pd
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier
import matplotlib.pyplot as plt

df = pd.DataFrame({
    'Bangun': ['Terlambat', 'Tidak Terlambat', 'Tidak Terlambat', 'Terlambat', 'Tidak Terlambat', 'Terlambat'],
    'Perkuliahan': ['Datang', 'Tidak', 'Datang', 'Datang', 'Tidak', 'Datang'],
    'Hujan': ['Tidak', 'Ya', 'Ya', 'Tidak', 'Ya', 'Ya'],
    'Makan': ['Sudah', 'Belum', 'Sudah', 'Sudah', 'Belum', 'Sudah'],
    'Mandi': ['Ya', 'Tidak', 'Ya', 'Tidak', 'Tidak', 'Ya']})


y = df['Perkuliahan']
df = pd.get_dummies(df, drop_first=True,dtype=int)

X = df.drop('Perkuliahan_Tidak', axis=1)

clf = DecisionTreeClassifier(random_state=100)
clf.fit(X, y)

plt.figure(figsize=(10, 4))
tree.plot_tree(clf, feature_names=list(X.columns), class_names=['Datang', 'Tidak'], filled=True)
plt.show()

========================================================================================================================
bubble sort
#Bubble sort
listsort = [6, 7, 3, 2, 5, 4, 9]

def bubblesort(var):
    
    iterasi = 0
    
    while iterasi < (len(var)-1):
        cursor = 0
        while cursor < (len(var)-1):
            
            if var[cursor]> var[cursor + 1]:
                var[cursor],var[cursor + 1] = var[cursor + 1], var[cursor]
            cursor = cursor + 1
        iterasi = iterasi + 1
    return var

print(bubblesort(listsort))
========================================================================================================================
descending sort
listsort = [6, 7, 3, 2, 5, 4, 9]

def descendingsort(var):
    
    iterasi = 0
    
    while iterasi < (len(var)-1):
        cursor = 0
        while cursor < (len(var)-1):
            
            if var[cursor] < var[cursor + 1]:
                var[cursor], var[cursor + 1] = var[cursor + 1], var[cursor]
            cursor = cursor + 1
        iterasi = iterasi + 1
    return var

print(descendingsort(listsort))
=============================================================================================================
selection sort
#Selection Sort

def selectionsort(var):
    for i in range(len(var)): # i = posisi cursor
        
        # Temukan nilai paling kecil selain posisi cursor
        min_idx = i # index dengan nilai terkecil di array
        for j in range(i + 1, len (var)):
            if var[min_idx]:
                min_idx = j # maka index j adalah terkecil
                
        # swap the found minimum element with the first element
        var[i], var[min_idx] = var[min_idx], var[i]
    return var

listsort = [6, 7, 3, 2, 5, 4, 9]
print(selectionsort(listsort))
======================================================================================================
linear search
# Linear Search
a = [10, 4, 2, 3, 7, 1, 6, 8]

cari = int(input("Masukkan nilai yang dicari: "))
ketemu = False
for i in range(0, len(a)):
    if cari == a[i]:
        ketemu = True
        idx = i
        break
 
if ketemu:
    print("Nilai: ", cari, "berhasil ditemukan di index ke ", idx)
else:
    print("Nilai: ", cari, "tidak ditemukan")
==========================================================================================
def binary_search(arr, x):
    low = 0
    high = len(arr) - 1 # Jumlah index / panjang index
    mid = 0
    
    while low <= high:
        
        mid = (high + low) // 2 # // <- maksudnya hasil pembagian dibulatkan ke bawah
       
       # Jika x nya lebih besar dari nilai tengah, cek yang kanan saja 
        if arr[mid] < x:
            low = mid + 1
            
        elif arr[mid] > x:
            high = mid - 1
            
        # Apakah ada x di tengah pas?
        else:
            return mid
            
# if we reach here, then the element was no present
    return "TIDAK DITEMUKAN"

list = [0, 4, 7, 10, 14, 23, 45, 47, 53]
a = int(input("Masukkan angka yang ingin dicari: "))

print(binary_search(list, a))
====================================================================================================
dijkstra
graf = {'1': ['2', '3', '4'],
        '2': [],
        '3': ['4'],
        '4': ['5'],
        '5': ['2', '3']}
def find_shortest_path(graph, node_awal, node_akhir, path=[]):
    path = path + [node_awal]
    if node_awal == node_akhir:
        print("==== Jalur yang ditemukan: ", path)
        return path
    if node_awal not in graph:
        return None
    shortest = []
    
    for node in graph[node_awal]:
        print('Path saat ini', path)
        print('Node tujuan berikutnya adalah', node, 'dari node sebelumnya yaitu', node_awal)
        
        if node not in path:
            newpaths = find_shortest_path(graph, node, node_akhir, path)
            if newpaths:
                if not shortest or len(newpaths) < len(shortest):
                    shortest = newpaths
    return shortest

path = find_shortest_path(graf, '1', '5')
print(path)
====================================================================================================
import heapq

def dijkstra(graph, start, end):
    queue = []
    heapq.heappush(queue, (0, start))
    distances = {node: float('infinity') for node in graph}
    distances[start] = 0
    paths = {start: [start]}

    while queue:
        current_distance, current_node = heapq.heappop(queue)

        if distances[current_node] < current_distance:
            continue

        for adjacent, weight in graph[current_node].items():
            distance = current_distance + weight

            if distance < distances[adjacent]:
                distances[adjacent] = distance
                paths[adjacent] = paths[current_node] + [adjacent]
                heapq.heappush(queue, (distance, adjacent))

    return distances[end], paths[end]
================================================================================================================
depth first search
def find_all_paths(graph, node_awal, node_akhir, path=[]):
    path = path + [node_awal]
    if node_awal == node_akhir:
        print("===== Jalur yang ditemukan", path)
        return [path]
    if node_awal not in graph:
        return []
    paths = []
    
    for node in graph[node_awal]:
        print('Path saat ini', path)
        print('Node berikutnya adalah %s dari node sebelumnya %s' %(node, node_awal))
        
        if node not in path:
            newpaths = find_all_paths(graph, node, node_akhir, path)
            for newpath in newpaths:
                paths.append(newpath)
    return paths

graf = {'1': ['2', '3', '4'],
        '2': [],
        '3': ['4'],
        '4': ['5'],
        '5': ['2', '3']}

find_all_paths(graf, '1', '4')
========================================================================================================
tree
class Node:
    def __init__(self, value, left = None, mid = None, right = None):
        self.value = value
        
        self.left = left
        self.mid = mid 
        self.right = right
    
    def show_root(self):
        return self.left.val, self.mid, self.right
    
def preorder(node):
    if node:
        print(node.value, end = ' ')
        preorder(node.left)
        preorder(node.mid)
        preorder(node.right)
            
def inorder(node):
    if node:
        inorder(node.left)
        print(node.value, end = ' ')
        inorder(node.mid)
        inorder(node.right)
            
def postorder(node):
    if node:
        postorder(node.left)
        postorder(node.mid)
        postorder(node.right)
        print(node.value, end = ' ')
            
root = Node(value='Z')

root.left = Node(value='A')
root.mid = Node(value='G')
root.right = Node(value='R')

root.left.left = Node(value='X')

root.left.left.left = Node(value='B')
root.left.left.mid = Node(value='N')
root.left.left.right = Node(value='W')

root.left.left.right.left = Node(value='Q')

root.right.right = Node(value='F')
root.right.right.left = Node(value='S')
root.right.right.right = Node(value='J')

root.right.right.left.left = Node(value='D')
root.right.right.left.right = Node(value='K')

root.right.right.right.right = Node(value='P')

preorder(root)
inorder(root)
postorder(root)
